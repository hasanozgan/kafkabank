/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hasanozgan.kafkabank.models;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountBalance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5132472509741364616L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountBalance\",\"namespace\":\"com.hasanozgan.kafkabank.models\",\"fields\":[{\"name\":\"customer_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"double\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String customer_id;
  @Deprecated public double amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountBalance() {}

  /**
   * All-args constructor.
   * @param customer_id The new value for customer_id
   * @param amount The new value for amount
   */
  public AccountBalance(java.lang.String customer_id, java.lang.Double amount) {
    this.customer_id = customer_id;
    this.amount = amount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customer_id;
    case 1: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customer_id = (java.lang.String)value$; break;
    case 1: amount = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customer_id' field.
   * @return The value of the 'customer_id' field.
   */
  public java.lang.String getCustomerId() {
    return customer_id;
  }

  /**
   * Sets the value of the 'customer_id' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.String value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Creates a new AccountBalance RecordBuilder.
   * @return A new AccountBalance RecordBuilder
   */
  public static com.hasanozgan.kafkabank.models.AccountBalance.Builder newBuilder() {
    return new com.hasanozgan.kafkabank.models.AccountBalance.Builder();
  }

  /**
   * Creates a new AccountBalance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountBalance RecordBuilder
   */
  public static com.hasanozgan.kafkabank.models.AccountBalance.Builder newBuilder(com.hasanozgan.kafkabank.models.AccountBalance.Builder other) {
    return new com.hasanozgan.kafkabank.models.AccountBalance.Builder(other);
  }

  /**
   * Creates a new AccountBalance RecordBuilder by copying an existing AccountBalance instance.
   * @param other The existing instance to copy.
   * @return A new AccountBalance RecordBuilder
   */
  public static com.hasanozgan.kafkabank.models.AccountBalance.Builder newBuilder(com.hasanozgan.kafkabank.models.AccountBalance other) {
    return new com.hasanozgan.kafkabank.models.AccountBalance.Builder(other);
  }

  /**
   * RecordBuilder for AccountBalance instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountBalance>
    implements org.apache.avro.data.RecordBuilder<AccountBalance> {

    private java.lang.String customer_id;
    private double amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hasanozgan.kafkabank.models.AccountBalance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AccountBalance instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hasanozgan.kafkabank.models.AccountBalance other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[0].schema(), other.customer_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.amount)) {
        this.amount = data().deepCopy(fields()[1].schema(), other.amount);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'customer_id' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customer_id;
    }

    /**
      * Sets the value of the 'customer_id' field.
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public com.hasanozgan.kafkabank.models.AccountBalance.Builder setCustomerId(java.lang.String value) {
      validate(fields()[0], value);
      this.customer_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * @return This builder.
      */
    public com.hasanozgan.kafkabank.models.AccountBalance.Builder clearCustomerId() {
      customer_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.hasanozgan.kafkabank.models.AccountBalance.Builder setAmount(double value) {
      validate(fields()[1], value);
      this.amount = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.hasanozgan.kafkabank.models.AccountBalance.Builder clearAmount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AccountBalance build() {
      try {
        AccountBalance record = new AccountBalance();
        record.customer_id = fieldSetFlags()[0] ? this.customer_id : (java.lang.String) defaultValue(fields()[0]);
        record.amount = fieldSetFlags()[1] ? this.amount : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
